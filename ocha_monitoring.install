<?php
/**
 * @file
 * Monitoring base install file.
 */

use Drupal\monitoring\Entity\SensorConfig;

/**
 * Active list of our monitors.
 */
function ocha_monitoring_monitors() {
  return [
    'ocha_current_drupal_version',
    'ocha_current_php_version',
    'ocha_current_release',
    'ocha_deployment_identifier',
    'ocha_google_tag',
  ];
}

/**
 * Implements hook_install().
 *
 * Disable sensors from contrib.
 */
function ocha_monitoring_install() {
  if (\Drupal::service('config.installer')->isSyncing()) {
    // Don't create any config when syncing.
    // @todo change to $is_syncing param after 8.9 is minimum per
    // https://www.drupal.org/node/3098920
    return;
  }

  $active_sensors = [
    'core_cron_last_run_age',
    'core_maintenance_mode',
    'core_requirements_memcache',
    'core_requirements_mysql',
    'core_requirements_system',
    'monitoring_installed_modules',
    'ocha_current_drupal_version',
    'ocha_current_php_version',
    'ocha_current_release',
    'ocha_deployment_identifier',
    'ocha_google_tag',
    'update_contrib',
    'update_core',
  ];

  // Disable sensors from contrib.
  $sensor_configs = SensorConfig::loadMultiple();

  foreach ($sensor_configs as $sensor) {
    if (in_array($sensor->id(), $active_sensors)) {
      $sensor->setStatus(TRUE);
      $sensor->save();
    }
    else {
      $sensor->setStatus(FALSE);
      $sensor->save();
    }
  }
}

/**
 * Re-add al config.
 */
function ocha_monitoring_update_10000(&$sandbox) {
  foreach (ocha_monitoring_monitors() as $id) {
    $config_id = 'monitoring.sensor_config.' . $id;
  }
  $config_path = \Drupal::service('extension.list.module')->getPath('ocha_monitoring') . '/config/install/' . $config_id .'.yml';
  $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
  \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
}
