<?php

/**
 * @file
 * Monitoring file.
 */

use Drupal\monitoring\Entity\SensorConfig;
use Symfony\Component\Yaml\Yaml;
use DrupalFinder\DrupalFinderComposerRuntime;
use GuzzleHttp\TransferStats;

/**
 * Active list of sensors.
 */
function ocha_monitoring_active_monitors() {
  $active_monitors = &drupal_static(__FUNCTION__);
  if (isset($active_monitors)) {
    return $active_monitors;
  }

  $active_monitors = array_merge([
    'core_cron_last_run_age',
    'monitoring_installed_modules',
    'update_contrib',
    'update_core',
  ], ocha_monitoring_monitors());

  // Allow other modules to alter status.
  \Drupal::moduleHandler()->invokeAll('ocha_monitoring_active_monitors_alter', [
    &$active_monitors,
  ]);

  // Reset index.
  $active_monitors = array_values($active_monitors);
  return $active_monitors;
}

/**
 * Active list of our monitors.
 */
function ocha_monitoring_monitors() {
  return [
    'ocha_current_drupal_version',
    'ocha_current_php_version',
    'ocha_current_release',
    'ocha_deployment_identifier',
    'ocha_gtm_barebones',
    'ocha_common_design',
    'ocha_un_date',
    'ocha_env_link_fixer',
    'ocha_ocha_monitoring',
    'ocha_current_composer_version',
    'ocha_admin_paths',
  ];
}

/**
 * Re-add al config.
 */
function ocha_monitoring_enforce_monitors() {
  $paths = [
    \Drupal::service('extension.list.module')->getPath('ocha_monitoring') . '/config/install/',
    \Drupal::service('extension.list.module')->getPath('monitoring') . '/config/install/',
    \Drupal::service('extension.list.module')->getPath('monitoring') . '/config/optional/',
  ];

  // Reload our sensors from disk.
  foreach (ocha_monitoring_active_monitors() as $id) {
    $config_id = 'monitoring.sensor_config.' . $id;
    $config_file = $config_id . '.yml';
    $data = [];

    foreach($paths as $path) {
      $config_path = $path . $config_file;
      if (!file_exists($config_path)) {
        continue;
      }
      $data = Yaml::parseFile($config_path);
    }

    if ($data) {
      \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
    }
  }

  // Activate sensors we want.
  // Disable sensors from contrib.
  $sensor_configs = SensorConfig::loadMultiple();

  foreach ($sensor_configs as $sensor) {
    if (in_array($sensor->id(), ocha_monitoring_active_monitors())) {
      $sensor->setStatus(TRUE);
      $sensor->save();
    }
    else {
      $sensor->setStatus(FALSE);
      $sensor->save();
    }
  }
}

/**
 * Get installed version from composer.
 */
function ocha_monitoring_get_version_info_from_composer($prefix, $project) {
  $drupalFinder = new DrupalFinderComposerRuntime();
  if (!$drupalFinder->getDrupalRoot()) {
    return [];
  }

  $package = ocha_monitoring_get_composer_packages($drupalFinder->getVendorDir(), $prefix, $project);
  if (!$package) {
    return [];
  }

  // Fetch latests tag from Github.
  $latest = 'Unknown';

  try {
    $url = str_replace('.git', '', $package['source']['url']) . '/releases/latest';
    $final_path = '';

    $response = Drupal::httpClient()->head($url, [
      'on_stats' => function (TransferStats $stats) use (&$final_path) {
        $final_path = $stats->getEffectiveUri()->getPath();
      },
    ]);

    if ($response->getStatusCode() == 200) {
      $parts = explode('/', $final_path);
      $latest = array_pop($parts);
    }
  }
  catch (\Exception) {
    $latest = 'Not found';
  }

  return [
    'version' => $package['version'] ?? 'Unknown',
    'latest' => $latest,
  ];
}

/**
 * Get package info from composer.
 */
function ocha_monitoring_get_composer_packages($path, $prefix, $project) {
  $packages = &drupal_static(__FUNCTION__);

  if (!$packages) {
    $packages = json_decode(file_get_contents($path . '/composer/installed.json'), TRUE);
    // Composer 2.0 compatibility.
    // @see https://getcomposer.org/upgrade/UPGRADE-2.0.md
    $packages = $packages['packages'] ?? $packages;
    $packages = is_array($packages) ? $packages : [];
  }

  foreach ($packages as $package) {
    if ($package['name'] == $prefix . '/' . $project) {
      return $package;
    }
  }

  return [];
}
